"""Initial migration with all tables

Revision ID: 1d8d1e3be641
Revises: 
Create Date: 2025-08-31 11:48:11.107876

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '1d8d1e3be641'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('bookings', 'id',
               existing_type=sa.UUID(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('bookings', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               type_=sa.DateTime(),
               existing_nullable=False)
    op.alter_column('bookings', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               type_=sa.DateTime(),
               existing_nullable=False)
    op.alter_column('bookings', 'start_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=False)
    op.alter_column('bookings', 'end_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=False)
    op.alter_column('bookings', 'status',
               existing_type=postgresql.ENUM('pending', 'confirmed', 'cancelled', 'completed', 'no_show', name='booking_status'),
               server_default=None,
               type_=sa.Enum('PENDING', 'CONFIRMED', 'CANCELLED', 'COMPLETED', 'NO_SHOW', name='bookingstatus'),
               existing_nullable=False)
    op.alter_column('bookings', 'reason',
               existing_type=sa.TEXT(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               existing_nullable=True)
    op.drop_index(op.f('idx_bookings_status'), table_name='bookings')
    op.drop_index(op.f('idx_bookings_user'), table_name='bookings')
    op.drop_index(op.f('idx_bookings_vet_time'), table_name='bookings')
    op.drop_constraint(op.f('bookings_user_id_fkey'), 'bookings', type_='foreignkey')
    op.drop_constraint(op.f('bookings_vet_id_fkey'), 'bookings', type_='foreignkey')
    op.drop_constraint(op.f('bookings_pet_id_fkey'), 'bookings', type_='foreignkey')
    op.create_foreign_key(None, 'bookings', 'vets', ['vet_id'], ['id'])
    op.create_foreign_key(None, 'bookings', 'users', ['user_id'], ['id'])
    op.create_foreign_key(None, 'bookings', 'pets', ['pet_id'], ['id'])
    op.alter_column('pets', 'id',
               existing_type=sa.UUID(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('pets', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               type_=sa.DateTime(),
               existing_nullable=False)
    op.alter_column('pets', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               type_=sa.DateTime(),
               existing_nullable=False)
    op.alter_column('pets', 'name',
               existing_type=sa.TEXT(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               existing_nullable=False)
    op.alter_column('pets', 'species',
               existing_type=sa.TEXT(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               existing_nullable=False)
    op.alter_column('pets', 'breed',
               existing_type=sa.TEXT(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               existing_nullable=True)
    op.alter_column('pets', 'sex',
               existing_type=sa.TEXT(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               existing_nullable=True)
    op.alter_column('pets', 'notes',
               existing_type=sa.TEXT(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               existing_nullable=True)
    op.drop_index(op.f('idx_pets_user_id'), table_name='pets')
    op.drop_index(op.f('idx_pets_user_name'), table_name='pets')
    op.drop_constraint(op.f('pets_user_id_fkey'), 'pets', type_='foreignkey')
    op.create_foreign_key(None, 'pets', 'users', ['user_id'], ['id'])
    op.alter_column('users', 'id',
               existing_type=sa.UUID(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               type_=sa.DateTime(),
               existing_nullable=False)
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               type_=sa.DateTime(),
               existing_nullable=False)
    op.alter_column('users', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('users', 'email',
               existing_type=postgresql.CITEXT(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               existing_nullable=False)
    op.alter_column('users', 'full_name',
               existing_type=sa.TEXT(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               existing_nullable=False)
    op.alter_column('users', 'password_hash',
               existing_type=sa.TEXT(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               existing_nullable=True)
    op.drop_index(op.f('idx_users_email'), table_name='users')
    op.add_column('vet_time_off', sa.Column('created_at', sa.DateTime(), nullable=False))
    op.add_column('vet_time_off', sa.Column('updated_at', sa.DateTime(), nullable=False))
    op.alter_column('vet_time_off', 'id',
               existing_type=sa.UUID(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('vet_time_off', 'start_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=False)
    op.alter_column('vet_time_off', 'end_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=False)
    op.alter_column('vet_time_off', 'reason',
               existing_type=sa.TEXT(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               existing_nullable=True)
    op.drop_index(op.f('idx_vet_time_off_vet'), table_name='vet_time_off')
    op.drop_constraint(op.f('vet_time_off_vet_id_fkey'), 'vet_time_off', type_='foreignkey')
    op.create_foreign_key(None, 'vet_time_off', 'vets', ['vet_id'], ['id'])
    op.add_column('vet_working_hours', sa.Column('created_at', sa.DateTime(), nullable=False))
    op.add_column('vet_working_hours', sa.Column('updated_at', sa.DateTime(), nullable=False))
    op.alter_column('vet_working_hours', 'id',
               existing_type=sa.UUID(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('vet_working_hours', 'day',
               existing_type=postgresql.ENUM('mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun', name='day_of_week'),
               type_=sa.Enum('MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT', 'SUN', name='dayofweek'),
               existing_nullable=False)
    op.alter_column('vet_working_hours', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=False)
    op.drop_index(op.f('idx_vet_working_hours_vet'), table_name='vet_working_hours')
    op.drop_constraint(op.f('vet_working_hours_vet_id_day_start_time_end_time_key'), 'vet_working_hours', type_='unique')
    op.drop_constraint(op.f('vet_working_hours_vet_id_fkey'), 'vet_working_hours', type_='foreignkey')
    op.create_foreign_key(None, 'vet_working_hours', 'vets', ['vet_id'], ['id'])
    op.alter_column('vets', 'id',
               existing_type=sa.UUID(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('vets', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               type_=sa.DateTime(),
               existing_nullable=False)
    op.alter_column('vets', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               type_=sa.DateTime(),
               existing_nullable=False)
    op.alter_column('vets', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('vets', 'full_name',
               existing_type=sa.TEXT(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               existing_nullable=False)
    op.alter_column('vets', 'email',
               existing_type=postgresql.CITEXT(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               existing_nullable=True)
    op.alter_column('vets', 'phone',
               existing_type=sa.TEXT(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               existing_nullable=True)
    op.alter_column('vets', 'specialty',
               existing_type=postgresql.ENUM('general_practice', 'surgery', 'dentistry', 'dermatology', 'cardiology', 'orthopedics', 'ophthalmology', 'exotics', name='vet_specialty'),
               server_default=None,
               type_=sa.Enum('GENERAL_PRACTICE', 'SURGERY', 'DENTISTRY', 'DERMATOLOGY', 'CARDIOLOGY', 'ORTHOPEDICS', 'OPHTHALMOLOGY', 'EXOTICS', name='vetspecialty'),
               existing_nullable=False)
    op.alter_column('vets', 'bio',
               existing_type=sa.TEXT(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               existing_nullable=True)
    op.alter_column('vets', 'clinic_name',
               existing_type=sa.TEXT(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               existing_nullable=True)
    op.alter_column('vets', 'clinic_address',
               existing_type=sa.TEXT(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               existing_nullable=True)
    op.alter_column('vets', 'city',
               existing_type=sa.TEXT(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               existing_nullable=True)
    op.alter_column('vets', 'state_region',
               existing_type=sa.TEXT(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               existing_nullable=True)
    op.alter_column('vets', 'postal_code',
               existing_type=sa.TEXT(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               existing_nullable=True)
    op.alter_column('vets', 'country',
               existing_type=sa.TEXT(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               existing_nullable=True)
    op.drop_index(op.f('idx_vets_city'), table_name='vets')
    op.drop_index(op.f('idx_vets_specialty'), table_name='vets')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index(op.f('idx_vets_specialty'), 'vets', ['specialty'], unique=False)
    op.create_index(op.f('idx_vets_city'), 'vets', ['city'], unique=False)
    op.alter_column('vets', 'country',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('vets', 'postal_code',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('vets', 'state_region',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('vets', 'city',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('vets', 'clinic_address',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('vets', 'clinic_name',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('vets', 'bio',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('vets', 'specialty',
               existing_type=sa.Enum('GENERAL_PRACTICE', 'SURGERY', 'DENTISTRY', 'DERMATOLOGY', 'CARDIOLOGY', 'ORTHOPEDICS', 'OPHTHALMOLOGY', 'EXOTICS', name='vetspecialty'),
               server_default=sa.text("'general_practice'::vet_specialty"),
               type_=postgresql.ENUM('general_practice', 'surgery', 'dentistry', 'dermatology', 'cardiology', 'orthopedics', 'ophthalmology', 'exotics', name='vet_specialty'),
               existing_nullable=False)
    op.alter_column('vets', 'phone',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('vets', 'email',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=postgresql.CITEXT(),
               existing_nullable=True)
    op.alter_column('vets', 'full_name',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('vets', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('true'),
               existing_nullable=False)
    op.alter_column('vets', 'updated_at',
               existing_type=sa.DateTime(),
               server_default=sa.text('now()'),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.alter_column('vets', 'created_at',
               existing_type=sa.DateTime(),
               server_default=sa.text('now()'),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.alter_column('vets', 'id',
               existing_type=sa.UUID(),
               server_default=sa.text('uuid_generate_v4()'),
               existing_nullable=False)
    op.drop_constraint(None, 'vet_working_hours', type_='foreignkey')
    op.create_foreign_key(op.f('vet_working_hours_vet_id_fkey'), 'vet_working_hours', 'vets', ['vet_id'], ['id'], ondelete='CASCADE')
    op.create_unique_constraint(op.f('vet_working_hours_vet_id_day_start_time_end_time_key'), 'vet_working_hours', ['vet_id', 'day', 'start_time', 'end_time'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_vet_working_hours_vet'), 'vet_working_hours', ['vet_id', 'day'], unique=False)
    op.alter_column('vet_working_hours', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('true'),
               existing_nullable=False)
    op.alter_column('vet_working_hours', 'day',
               existing_type=sa.Enum('MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT', 'SUN', name='dayofweek'),
               type_=postgresql.ENUM('mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun', name='day_of_week'),
               existing_nullable=False)
    op.alter_column('vet_working_hours', 'id',
               existing_type=sa.UUID(),
               server_default=sa.text('uuid_generate_v4()'),
               existing_nullable=False)
    op.drop_column('vet_working_hours', 'updated_at')
    op.drop_column('vet_working_hours', 'created_at')
    op.drop_constraint(None, 'vet_time_off', type_='foreignkey')
    op.create_foreign_key(op.f('vet_time_off_vet_id_fkey'), 'vet_time_off', 'vets', ['vet_id'], ['id'], ondelete='CASCADE')
    op.create_index(op.f('idx_vet_time_off_vet'), 'vet_time_off', ['vet_id', 'start_at', 'end_at'], unique=False)
    op.alter_column('vet_time_off', 'reason',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('vet_time_off', 'end_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.alter_column('vet_time_off', 'start_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.alter_column('vet_time_off', 'id',
               existing_type=sa.UUID(),
               server_default=sa.text('uuid_generate_v4()'),
               existing_nullable=False)
    op.drop_column('vet_time_off', 'updated_at')
    op.drop_column('vet_time_off', 'created_at')
    op.create_index(op.f('idx_users_email'), 'users', ['email'], unique=False)
    op.alter_column('users', 'password_hash',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('users', 'full_name',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('users', 'email',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=postgresql.CITEXT(),
               existing_nullable=False)
    op.alter_column('users', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('true'),
               existing_nullable=False)
    op.alter_column('users', 'updated_at',
               existing_type=sa.DateTime(),
               server_default=sa.text('now()'),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.alter_column('users', 'created_at',
               existing_type=sa.DateTime(),
               server_default=sa.text('now()'),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.alter_column('users', 'id',
               existing_type=sa.UUID(),
               server_default=sa.text('uuid_generate_v4()'),
               existing_nullable=False)
    op.drop_constraint(None, 'pets', type_='foreignkey')
    op.create_foreign_key(op.f('pets_user_id_fkey'), 'pets', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_index(op.f('idx_pets_user_name'), 'pets', ['user_id', 'name'], unique=False)
    op.create_index(op.f('idx_pets_user_id'), 'pets', ['user_id'], unique=False)
    op.alter_column('pets', 'notes',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('pets', 'sex',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('pets', 'breed',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('pets', 'species',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('pets', 'name',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('pets', 'updated_at',
               existing_type=sa.DateTime(),
               server_default=sa.text('now()'),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.alter_column('pets', 'created_at',
               existing_type=sa.DateTime(),
               server_default=sa.text('now()'),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.alter_column('pets', 'id',
               existing_type=sa.UUID(),
               server_default=sa.text('uuid_generate_v4()'),
               existing_nullable=False)
    op.drop_constraint(None, 'bookings', type_='foreignkey')
    op.drop_constraint(None, 'bookings', type_='foreignkey')
    op.drop_constraint(None, 'bookings', type_='foreignkey')
    op.create_foreign_key(op.f('bookings_pet_id_fkey'), 'bookings', 'pets', ['pet_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('bookings_vet_id_fkey'), 'bookings', 'vets', ['vet_id'], ['id'], ondelete='RESTRICT')
    op.create_foreign_key(op.f('bookings_user_id_fkey'), 'bookings', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_index(op.f('idx_bookings_vet_time'), 'bookings', ['vet_id', 'start_at'], unique=False)
    op.create_index(op.f('idx_bookings_user'), 'bookings', ['user_id', sa.literal_column('start_at DESC')], unique=False)
    op.create_index(op.f('idx_bookings_status'), 'bookings', ['status'], unique=False)
    op.alter_column('bookings', 'reason',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('bookings', 'status',
               existing_type=sa.Enum('PENDING', 'CONFIRMED', 'CANCELLED', 'COMPLETED', 'NO_SHOW', name='bookingstatus'),
               server_default=sa.text("'pending'::booking_status"),
               type_=postgresql.ENUM('pending', 'confirmed', 'cancelled', 'completed', 'no_show', name='booking_status'),
               existing_nullable=False)
    op.alter_column('bookings', 'end_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.alter_column('bookings', 'start_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.alter_column('bookings', 'updated_at',
               existing_type=sa.DateTime(),
               server_default=sa.text('now()'),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.alter_column('bookings', 'created_at',
               existing_type=sa.DateTime(),
               server_default=sa.text('now()'),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.alter_column('bookings', 'id',
               existing_type=sa.UUID(),
               server_default=sa.text('uuid_generate_v4()'),
               existing_nullable=False)
    # ### end Alembic commands ###
